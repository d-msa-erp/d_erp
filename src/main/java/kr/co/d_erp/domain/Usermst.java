package kr.co.d_erp.domain;

import jakarta.persistence.*;
import lombok.Getter;
import lombok.Setter;
import lombok.NoArgsConstructor;
import lombok.AllArgsConstructor;
import lombok.Builder;
import org.hibernate.annotations.DynamicInsert;
import org.hibernate.annotations.DynamicUpdate;

import java.time.LocalDate;

@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
@Entity
@Table(name = "TB_USERMST",
    uniqueConstraints = {
        @UniqueConstraint(name = "UQ_TB_USERMST_USER_ID", columnNames = {"USER_ID"}),
        @UniqueConstraint(name = "UQ_TB_USERMST_USER_E_MAIL", columnNames = {"USER_E_MAIL"}),
        @UniqueConstraint(name = "UQ_TB_USERMST_USER_TEL", columnNames = {"USER_TEL"}),
        @UniqueConstraint(name = "UQ_TB_USERMST_USER_HP", columnNames = {"USER_HP"})
    }
)
@DynamicInsert // insert 시 null이 아닌 필드만 포함 (DB default 값 활용)
@DynamicUpdate // update 시 변경된 필드만 포함
public class Usermst {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY) // Oracle의 GENERATED BY DEFAULT ON NULL AS IDENTITY 와 유사
    @Column(name = "USER_IDX")
    private Long userIdx;

    @Column(name = "USER_ID", length = 10, nullable = false)
    private String userId;

    @Column(name = "USER_PSWD", length = 100, nullable = false)
    private String userPswd; // 실제 사용 시 암호화 필요

    @Column(name = "USER_NM", length = 50, nullable = false)
    private String userNm;

    @Column(name = "USER_E_MAIL", length = 30, nullable = false)
    private String userEmail;

    @Column(name = "USER_TEL", length = 20, nullable = false)
    private String userTel;

    @Column(name = "USER_HP", length = 20, nullable = false)
    private String userHp;

    @Column(name = "USER_DEPT", length = 20, nullable = false)
    private String userDept;

    @Column(name = "USER_POSITION", length = 20, nullable = false)
    private String userPosition;

    @Column(name = "HIRE_DT", nullable = false)
    private LocalDate hireDt;

    @Column(name = "RETIRE_DT")
    private LocalDate retireDt;

    @Column(name = "USER_ROLE", length = 2, nullable = false, columnDefinition = "VARCHAR2(2) DEFAULT '01'")
    private String userRole; // CHECK 제약은 DB 레벨에서 적용, 필요시 @Pattern 등으로 Java 유효성 검사 추가

    @Column(name = "USER_STATUS", length = 2, nullable = false, columnDefinition = "VARCHAR2(2) DEFAULT '01'")
    private String userStatus; // CHECK 제약은 DB 레벨에서 적용

    // 편의를 위한 초기화 메서드 (USER_ROLE, USER_STATUS 기본값 설정)
    @PrePersist
    protected void onCreate() {
        if (this.userRole == null) {
            this.userRole = "01";
        }
        if (this.userStatus == null) {
            this.userStatus = "01";
        }
    }
}